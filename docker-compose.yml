version: '3.8'

services:
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
      args:
        - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
        - BMS_PROFILE=${BMS_PROFILE}
        - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "8888:8888"
    environment:
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
      - SPRING_PROFILES_ACTIVE=${BMS_PROFILE:-development}
    volumes:
      - ./config-repo:/app/config-repo # Mount your local config-repo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      eureka-server:
        condition: service_healthy

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
      args:
        - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
        - BMS_PROFILE=${BMS_PROFILE}
        - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "8761:8761"
    environment:
      - EUREKA_SERVER_PORT=8761
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      args:
        - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
        - BMS_PROFILE=${BMS_PROFILE}
        - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "8765:8765"
    environment:
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
      - SPRING_DATA_MONGODB_URI=mongodb://bms-mongodb:27017/ecommerce_db
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
      args:
        - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
        - BMS_PROFILE=${BMS_PROFILE}
        - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "8004:8004"
    environment:
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      args:
        - CONFIG_REPO_PATH=${CONFIG_REPO_PATH}
        - BMS_PROFILE=${BMS_PROFILE}
        - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
        - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "8001:8001"
    environment:
      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: bms-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:3.6
    container_name: bms-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_INIT_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_INIT_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: bms-redis
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zipkin:
    image: openzipkin/zipkin
    container_name: bms-zipkin
    ports:
      - "9411:9411"

  rabbitmq:
    image: rabbitmq:management
    container_name: bms-rmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      rabbitmq_host: bms-rmq  # Set hostname for other services to use
      rabbitmq_port: 5672       # Set port for other services to use
      rabbitmq_username: ${RABBITMQ_DEFAULT_USER} # Set username for other services
      rabbitmq_password: ${RABBITMQ_DEFAULT_PASS} # Set password for other services
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
secrets:  # Define your secrets here
  jwt-secret:
    file: ./jwt.secret 